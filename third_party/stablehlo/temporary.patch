diff --ruN a/stablehlo/BUILD.bazel b/stablehlo/BUILD.bazel
--- stablehlo/BUILD.bazel
+++ stablehlo/BUILD.bazel
@@ -58,16 +58,10 @@
 gentbl_cc_library(
     name = "base_attr_interfaces_inc_gen",
     strip_include_prefix = ".",
-    tbl_outs = [
-        (
-            ["-gen-attr-interface-decls"],
-            "stablehlo/dialect/BaseAttrInterfaces.h.inc",
-        ),
-        (
-            ["-gen-attr-interface-defs"],
-            "stablehlo/dialect/BaseAttrInterfaces.cpp.inc",
-        ),
-    ],
+    tbl_outs = {
+        "stablehlo/dialect/BaseAttrInterfaces.h.inc": ["-gen-attr-interface-decls"],
+        "stablehlo/dialect/BaseAttrInterfaces.cpp.inc": ["-gen-attr-interface-defs"],
+    },
     tblgen = "@llvm-project//mlir:mlir-tblgen",
     td_file = "stablehlo/dialect/Base.td",
     deps = [":stablehlo_ops_td_files"],
@@ -107,16 +101,10 @@
 gentbl_cc_library(
     name = "chlo_attrs_inc_gen",
     strip_include_prefix = ".",
-    tbl_outs = [
-        (
-            ["-gen-attrdef-decls"],
-            "stablehlo/dialect/ChloAttrs.h.inc",
-        ),
-        (
-            ["-gen-attrdef-defs"],
-            "stablehlo/dialect/ChloAttrs.cpp.inc",
-        ),
-    ],
+    tbl_outs = {
+        "stablehlo/dialect/ChloAttrs.h.inc": ["-gen-attrdef-decls"],
+        "stablehlo/dialect/ChloAttrs.cpp.inc": ["-gen-attrdef-defs"],
+    },
     tblgen = "@llvm-project//mlir:mlir-tblgen",
     td_file = "stablehlo/dialect/ChloOps.td",
     deps = [
@@ -173,16 +161,10 @@
 gentbl_cc_library(
     name = "chlo_enums_inc_gen",
     strip_include_prefix = ".",
-    tbl_outs = [
-        (
-            ["-gen-enum-decls"],
-            "stablehlo/dialect/ChloEnums.h.inc",
-        ),
-        (
-            ["-gen-enum-defs"],
-            "stablehlo/dialect/ChloEnums.cpp.inc",
-        ),
-    ],
+    tbl_outs = {
+        "stablehlo/dialect/ChloEnums.h.inc": ["-gen-enum-decls"],
+        "stablehlo/dialect/ChloEnums.cpp.inc": ["-gen-enum-defs"],
+    },
     tblgen = "@llvm-project//mlir:mlir-tblgen",
     td_file = "stablehlo/dialect/ChloOps.td",
     deps = [
@@ -193,23 +175,14 @@
 gentbl_cc_library(
     name = "chlo_ops_inc_gen",
     strip_include_prefix = ".",
-    tbl_outs = [
-        (
-            ["-gen-op-decls"],
-            "stablehlo/dialect/ChloOps.h.inc",
-        ),
-        (
-            ["-gen-op-defs"],
-            "stablehlo/dialect/ChloOps.cpp.inc",
-        ),
-        (
-            [
-                "-gen-dialect-doc",
-                "--dialect=chlo",
-            ],
-            "stablehlo/dialect/chlo.md",
-        ),
-    ],
+    tbl_outs = {
+        "stablehlo/dialect/ChloOps.h.inc": ["-gen-op-decls"],
+        "stablehlo/dialect/ChloOps.cpp.inc": ["-gen-op-defs"],
+        "stablehlo/dialect/chlo.md": [
+            "-gen-dialect-doc",
+            "--dialect=chlo",
+        ],
+    },
     tblgen = "@llvm-project//mlir:mlir-tblgen",
     td_file = "stablehlo/dialect/ChloOps.td",
     deps = [
@@ -304,12 +277,7 @@
 
 gentbl_cc_library(
     name = "chlo_rewriters_inc_gen",
-    tbl_outs = [
-        (
-            ["--gen-rewriters"],
-            "stablehlo/transforms/ChloDecompositionPatterns.h.inc",
-        ),
-    ],
+    tbl_outs = {"stablehlo/transforms/ChloDecompositionPatterns.h.inc": ["--gen-rewriters"]},
     tblgen = "@llvm-project//mlir:mlir-tblgen",
     td_file = "stablehlo/transforms/ChloDecompositionPatterns.td",
     deps = [
@@ -320,12 +288,7 @@
 
 gentbl_cc_library(
     name = "stablehlo_aggressive_simplification_inc_gen",
-    tbl_outs = [
-        (
-            ["--gen-rewriters"],
-            "stablehlo/transforms/optimization/StablehloAggressiveSimplificationPatterns.h.inc",
-        ),
-    ],
+    tbl_outs = {"stablehlo/transforms/optimization/StablehloAggressiveSimplificationPatterns.h.inc": ["--gen-rewriters"]},
     tblgen = "@llvm-project//mlir:mlir-tblgen",
     td_file = "stablehlo/transforms/optimization/StablehloAggressiveSimplificationPatterns.td",
     deps = [
@@ -335,12 +298,7 @@
 
 gentbl_cc_library(
     name = "stablehlo_legalize_deprecated_ops_inc_gen",
-    tbl_outs = [
-        (
-            ["--gen-rewriters"],
-            "stablehlo/transforms/StablehloLegalizeDeprecatedOpsPatterns.h.inc",
-        ),
-    ],
+    tbl_outs = {"stablehlo/transforms/StablehloLegalizeDeprecatedOpsPatterns.h.inc": ["--gen-rewriters"]},
     tblgen = "@llvm-project//mlir:mlir-tblgen",
     td_file = "stablehlo/transforms/StablehloLegalizeDeprecatedOpsPatterns.td",
     deps = [
@@ -350,12 +308,7 @@
 
 gentbl_cc_library(
     name = "vhlo_rewriters_inc_gen",
-    tbl_outs = [
-        (
-            ["--gen-rewriters"],
-            "stablehlo/transforms/VhloToVersionPatterns.h.inc",
-        ),
-    ],
+    tbl_outs = {"stablehlo/transforms/VhloToVersionPatterns.h.inc": ["--gen-rewriters"]},
     tblgen = "@llvm-project//mlir:mlir-tblgen",
     td_file = "stablehlo/transforms/VhloToVersionPatterns.td",
     deps = [
@@ -365,12 +318,7 @@
 
 gentbl_cc_library(
     name = "stablehlo_create_compatibility_expander_inc_gen",
-    tbl_outs = [
-        (
-            ["--gen-rewriters"],
-            "stablehlo/transforms/StablehloCompatibilityExpanderPatterns.h.inc",
-        ),
-    ],
+    tbl_outs = {"stablehlo/transforms/StablehloCompatibilityExpanderPatterns.h.inc": ["--gen-rewriters"]},
     tblgen = "@llvm-project//mlir:mlir-tblgen",
     td_file = "stablehlo/transforms/StablehloCompatibilityExpanderPatterns.td",
     deps = [
@@ -380,12 +328,7 @@
 
 gentbl_cc_library(
     name = "stablehlo_create_complex_math_expander_inc_gen",
-    tbl_outs = [
-        (
-            ["--gen-rewriters"],
-            "stablehlo/transforms/StablehloComplexMathExpanderPatterns.h.inc",
-        ),
-    ],
+    tbl_outs = {"stablehlo/transforms/StablehloComplexMathExpanderPatterns.h.inc": ["--gen-rewriters"]},
     tblgen = "@llvm-project//mlir:mlir-tblgen",
     td_file = "stablehlo/transforms/StablehloComplexMathExpanderPatterns.td",
     deps = [
@@ -420,16 +363,10 @@
 gentbl_cc_library(
     name = "interpreter_ops_inc_gen",
     strip_include_prefix = ".",
-    tbl_outs = [
-        (
-            ["-gen-op-decls"],
-            "stablehlo/reference/InterpreterOps.h.inc",
-        ),
-        (
-            ["-gen-op-defs"],
-            "stablehlo/reference/InterpreterOps.cpp.inc",
-        ),
-    ],
+    tbl_outs = {
+        "stablehlo/reference/InterpreterOps.h.inc": ["-gen-op-decls"],
+        "stablehlo/reference/InterpreterOps.cpp.inc": ["-gen-op-defs"],
+    },
     tblgen = "@llvm-project//mlir:mlir-tblgen",
     td_file = "stablehlo/reference/InterpreterOps.td",
     deps = [
@@ -451,21 +388,15 @@
 gentbl_cc_library(
     name = "interpreter_pass_inc_gen",
     strip_include_prefix = ".",
-    tbl_outs = [
-        (
-            [
-                "-gen-pass-decls",
-                "-name=InterpreterTransforms",
-            ],
-            "stablehlo/reference/InterpreterPasses.h.inc",
-        ),
-        (
-            [
-                "-gen-pass-doc",
-            ],
-            "stablehlo/reference/interpreter_passes.md",
-        ),
-    ],
+    tbl_outs = {
+        "stablehlo/reference/InterpreterPasses.h.inc": [
+            "-gen-pass-decls",
+            "-name=InterpreterTransforms",
+        ],
+        "stablehlo/reference/interpreter_passes.md": [
+            "-gen-pass-doc",
+        ],
+    },
     tblgen = "@llvm-project//mlir:mlir-tblgen",
     td_file = "stablehlo/reference/InterpreterPasses.td",
     deps = ["@llvm-project//mlir:PassBaseTdFiles"],
@@ -494,21 +425,15 @@
 gentbl_cc_library(
     name = "linalg_pass_inc_gen",
     strip_include_prefix = ".",
-    tbl_outs = [
-        (
-            [
-                "-gen-pass-decls",
-                "-name=StablehloLinalgTransforms",
-            ],
-            "stablehlo/conversions/linalg/transforms/Passes.h.inc",
-        ),
-        (
-            [
-                "-gen-pass-doc",
-            ],
-            "stablehlo/conversions/linalg/transforms/stablehlo_linalg_passes.md",
-        ),
-    ],
+    tbl_outs = {
+        "stablehlo/conversions/linalg/transforms/Passes.h.inc": [
+            "-gen-pass-decls",
+            "-name=StablehloLinalgTransforms",
+        ],
+        "stablehlo/conversions/linalg/transforms/stablehlo_linalg_passes.md": [
+            "-gen-pass-doc",
+        ],
+    },
     tblgen = "@llvm-project//mlir:mlir-tblgen",
     td_file = "stablehlo/conversions/linalg/transforms/Passes.td",
     deps = ["@llvm-project//mlir:PassBaseTdFiles"],
@@ -901,16 +826,10 @@
 gentbl_cc_library(
     name = "stablehlo_attrs_inc_gen",
     strip_include_prefix = ".",
-    tbl_outs = [
-        (
-            ["-gen-attrdef-decls"],
-            "stablehlo/dialect/StablehloAttrs.h.inc",
-        ),
-        (
-            ["-gen-attrdef-defs"],
-            "stablehlo/dialect/StablehloAttrs.cpp.inc",
-        ),
-    ],
+    tbl_outs = {
+        "stablehlo/dialect/StablehloAttrs.h.inc": ["-gen-attrdef-decls"],
+        "stablehlo/dialect/StablehloAttrs.cpp.inc": ["-gen-attrdef-defs"],
+    },
     tblgen = "@llvm-project//mlir:mlir-tblgen",
     td_file = "stablehlo/dialect/StablehloOps.td",
     deps = [
@@ -1067,16 +986,10 @@
 gentbl_cc_library(
     name = "stablehlo_enums_inc_gen",
     strip_include_prefix = ".",
-    tbl_outs = [
-        (
-            ["-gen-enum-decls"],
-            "stablehlo/dialect/StablehloEnums.h.inc",
-        ),
-        (
-            ["-gen-enum-defs"],
-            "stablehlo/dialect/StablehloEnums.cpp.inc",
-        ),
-    ],
+    tbl_outs = {
+        "stablehlo/dialect/StablehloEnums.h.inc": ["-gen-enum-decls"],
+        "stablehlo/dialect/StablehloEnums.cpp.inc": ["-gen-enum-defs"],
+    },
     tblgen = "@llvm-project//mlir:mlir-tblgen",
     td_file = "stablehlo/dialect/StablehloOps.td",
     deps = [
@@ -1087,22 +1000,16 @@
 gentbl_cc_library(
     name = "stablehlo_types_inc_gen",
     strip_include_prefix = ".",
-    tbl_outs = [
-        (
-            [
-                "-gen-typedef-decls",
-                "--typedefs-dialect=stablehlo",
-            ],
-            "stablehlo/dialect/StablehloTypeDefs.h.inc",
-        ),
-        (
-            [
-                "-gen-typedef-defs",
-                "--typedefs-dialect=stablehlo",
-            ],
-            "stablehlo/dialect/StablehloTypeDefs.cpp.inc",
-        ),
-    ],
+    tbl_outs = {
+        "stablehlo/dialect/StablehloTypeDefs.h.inc": [
+            "-gen-typedef-decls",
+            "--typedefs-dialect=stablehlo",
+        ],
+        "stablehlo/dialect/StablehloTypeDefs.cpp.inc": [
+            "-gen-typedef-defs",
+            "--typedefs-dialect=stablehlo",
+        ],
+    },
     tblgen = "@llvm-project//mlir:mlir-tblgen",
     td_file = "stablehlo/dialect/StablehloOps.td",
     deps = [
@@ -1113,16 +1020,10 @@
 gentbl_cc_library(
     name = "stablehlo_ops_inc_gen",
     strip_include_prefix = ".",
-    tbl_outs = [
-        (
-            ["-gen-op-decls"],
-            "stablehlo/dialect/StablehloOps.h.inc",
-        ),
-        (
-            ["-gen-op-defs"],
-            "stablehlo/dialect/StablehloOps.cpp.inc",
-        ),
-    ],
+    tbl_outs = {
+        "stablehlo/dialect/StablehloOps.h.inc": ["-gen-op-decls"],
+        "stablehlo/dialect/StablehloOps.cpp.inc": ["-gen-op-defs"],
+    },
     tblgen = "@llvm-project//mlir:mlir-tblgen",
     td_file = "stablehlo/dialect/StablehloOps.td",
     deps = [
@@ -1188,20 +1089,14 @@
 gentbl_cc_library(
     name = "stablehlo_pass_inc_gen",
     strip_include_prefix = ".",
-    tbl_outs = [
-        (
-            [
-                "-gen-pass-decls",
-            ],
-            "stablehlo/transforms/Passes.h.inc",
-        ),
-        (
-            [
-                "-gen-pass-doc",
-            ],
-            "stablehlo/transforms/stablehlo_passes.md",
-        ),
-    ],
+    tbl_outs = {
+        "stablehlo/transforms/Passes.h.inc": [
+            "-gen-pass-decls",
+        ],
+        "stablehlo/transforms/stablehlo_passes.md": [
+            "-gen-pass-doc",
+        ],
+    },
     tblgen = "@llvm-project//mlir:mlir-tblgen",
     td_file = "stablehlo/transforms/Passes.td",
     deps = ["@llvm-project//mlir:PassBaseTdFiles"],
@@ -1304,21 +1199,15 @@
 gentbl_cc_library(
     name = "stablehlo_passes_optimization_inc_gen",
     strip_include_prefix = ".",
-    tbl_outs = [
-        (
-            [
-                "-gen-pass-decls",
-                "-name=Optimization",
-            ],
-            "stablehlo/transforms/optimization/Passes.h.inc",
-        ),
-        (
-            [
-                "-gen-pass-doc",
-            ],
-            "stablehlo/transforms/optimization/stablehlo_optimization_passes.md",
-        ),
-    ],
+    tbl_outs = {
+        "stablehlo/transforms/optimization/Passes.h.inc": [
+            "-gen-pass-decls",
+            "-name=Optimization",
+        ],
+        "stablehlo/transforms/optimization/stablehlo_optimization_passes.md": [
+            "-gen-pass-doc",
+        ],
+    },
     tblgen = "@llvm-project//mlir:mlir-tblgen",
     td_file = "stablehlo/transforms/optimization/Passes.td",
     deps = ["@llvm-project//mlir:PassBaseTdFiles"],
@@ -1555,19 +1444,13 @@
 gentbl_cc_library(
     name = "tosa_pass_inc_gen",
     strip_include_prefix = ".",
-    tbl_outs = [
-        (
-            [
-                "-gen-pass-decls",
-                "-name=StablehloTOSATransforms",
-            ],
-            "stablehlo/conversions/tosa/transforms/Passes.h.inc",
-        ),
-        (
-            ["-gen-pass-doc"],
-            "stablehlo/conversions/tosa/transforms/stablehlo_tosa_passes.md",
-        ),
-    ],
+    tbl_outs = {
+        "stablehlo/conversions/tosa/transforms/Passes.h.inc": [
+            "-gen-pass-decls",
+            "-name=StablehloTOSATransforms",
+        ],
+        "stablehlo/conversions/tosa/transforms/stablehlo_tosa_passes.md": ["-gen-pass-doc"],
+    },
     tblgen = "@llvm-project//mlir:mlir-tblgen",
     td_file = "stablehlo/conversions/tosa/transforms/Passes.td",
     deps = ["@llvm-project//mlir:PassBaseTdFiles"],
@@ -1607,12 +1490,7 @@
 
 gentbl_cc_library(
     name = "tosa_pdll_inc_gen",
-    tbl_outs = [
-        (
-            ["-x=cpp"],
-            "stablehlo/conversions/tosa/transforms/StablehloLegalizeToTosa.pdll.h.inc",
-        ),
-    ],
+    tbl_outs = {"stablehlo/conversions/tosa/transforms/StablehloLegalizeToTosa.pdll.h.inc": ["-x=cpp"]},
     tblgen = "@llvm-project//mlir:mlir-pdll",
     td_file = "stablehlo/conversions/tosa/transforms/StablehloLegalizeToTosa.pdll",
     deps = [
@@ -1710,16 +1588,10 @@
 gentbl_cc_library(
     name = "vhlo_attr_interfaces_inc_gen",
     strip_include_prefix = ".",
-    tbl_outs = [
-        (
-            ["-gen-attr-interface-decls"],
-            "stablehlo/dialect/VhloAttrInterfaces.h.inc",
-        ),
-        (
-            ["-gen-attr-interface-defs"],
-            "stablehlo/dialect/VhloAttrInterfaces.cpp.inc",
-        ),
-    ],
+    tbl_outs = {
+        "stablehlo/dialect/VhloAttrInterfaces.h.inc": ["-gen-attr-interface-decls"],
+        "stablehlo/dialect/VhloAttrInterfaces.cpp.inc": ["-gen-attr-interface-defs"],
+    },
     tblgen = "@llvm-project//mlir:mlir-tblgen",
     td_file = "stablehlo/dialect/VhloEnums.td",
     deps = [
@@ -1730,16 +1602,10 @@
 gentbl_cc_library(
     name = "vhlo_attrs_inc_gen",
     strip_include_prefix = ".",
-    tbl_outs = [
-        (
-            ["-gen-attrdef-decls"],
-            "stablehlo/dialect/VhloAttrs.h.inc",
-        ),
-        (
-            ["-gen-attrdef-defs"],
-            "stablehlo/dialect/VhloAttrs.cpp.inc",
-        ),
-    ],
+    tbl_outs = {
+        "stablehlo/dialect/VhloAttrs.h.inc": ["-gen-attrdef-decls"],
+        "stablehlo/dialect/VhloAttrs.cpp.inc": ["-gen-attrdef-defs"],
+    },
     tblgen = "@llvm-project//mlir:mlir-tblgen",
     td_file = "stablehlo/dialect/VhloOps.td",
     deps = [
@@ -1750,16 +1616,10 @@
 gentbl_cc_library(
     name = "vhlo_enums_inc_gen",
     strip_include_prefix = ".",
-    tbl_outs = [
-        (
-            ["-gen-enum-decls"],
-            "stablehlo/dialect/VhloEnums.h.inc",
-        ),
-        (
-            ["-gen-enum-defs"],
-            "stablehlo/dialect/VhloEnums.cpp.inc",
-        ),
-    ],
+    tbl_outs = {
+        "stablehlo/dialect/VhloEnums.h.inc": ["-gen-enum-decls"],
+        "stablehlo/dialect/VhloEnums.cpp.inc": ["-gen-enum-defs"],
+    },
     tblgen = "@llvm-project//mlir:mlir-tblgen",
     td_file = "stablehlo/dialect/VhloEnums.td",
     deps = [
@@ -1770,16 +1630,10 @@
 gentbl_cc_library(
     name = "vhlo_op_interfaces_inc_gen",
     strip_include_prefix = ".",
-    tbl_outs = [
-        (
-            ["-gen-op-interface-decls"],
-            "stablehlo/dialect/VhloOpInterfaces.h.inc",
-        ),
-        (
-            ["-gen-op-interface-defs"],
-            "stablehlo/dialect/VhloOpInterfaces.cpp.inc",
-        ),
-    ],
+    tbl_outs = {
+        "stablehlo/dialect/VhloOpInterfaces.h.inc": ["-gen-op-interface-decls"],
+        "stablehlo/dialect/VhloOpInterfaces.cpp.inc": ["-gen-op-interface-defs"],
+    },
     tblgen = "@llvm-project//mlir:mlir-tblgen",
     td_file = "stablehlo/dialect/VhloOps.td",
     deps = [
@@ -1822,16 +1676,10 @@
 gentbl_cc_library(
     name = "vhlo_ops_inc_gen",
     strip_include_prefix = ".",
-    tbl_outs = [
-        (
-            ["-gen-op-decls"],
-            "stablehlo/dialect/VhloOps.h.inc",
-        ),
-        (
-            ["-gen-op-defs"],
-            "stablehlo/dialect/VhloOps.cpp.inc",
-        ),
-    ],
+    tbl_outs = {
+        "stablehlo/dialect/VhloOps.h.inc": ["-gen-op-decls"],
+        "stablehlo/dialect/VhloOps.cpp.inc": ["-gen-op-defs"],
+    },
     tblgen = "@llvm-project//mlir:mlir-tblgen",
     td_file = "stablehlo/dialect/VhloOps.td",
     deps = [
@@ -1884,16 +1732,10 @@
 gentbl_cc_library(
     name = "vhlo_type_interfaces_inc_gen",
     strip_include_prefix = ".",
-    tbl_outs = [
-        (
-            ["-gen-type-interface-decls"],
-            "stablehlo/dialect/VhloTypeInterfaces.h.inc",
-        ),
-        (
-            ["-gen-type-interface-defs"],
-            "stablehlo/dialect/VhloTypeInterfaces.cpp.inc",
-        ),
-    ],
+    tbl_outs = {
+        "stablehlo/dialect/VhloTypeInterfaces.h.inc": ["-gen-type-interface-decls"],
+        "stablehlo/dialect/VhloTypeInterfaces.cpp.inc": ["-gen-type-interface-defs"],
+    },
     tblgen = "@llvm-project//mlir:mlir-tblgen",
     td_file = "stablehlo/dialect/VhloTypes.td",
     deps = [
@@ -1904,16 +1746,10 @@
 gentbl_cc_library(
     name = "vhlo_types_inc_gen",
     strip_include_prefix = ".",
-    tbl_outs = [
-        (
-            ["-gen-typedef-decls"],
-            "stablehlo/dialect/VhloTypeDefs.h.inc",
-        ),
-        (
-            ["-gen-typedef-defs"],
-            "stablehlo/dialect/VhloTypeDefs.cpp.inc",
-        ),
-    ],
+    tbl_outs = {
+        "stablehlo/dialect/VhloTypeDefs.h.inc": ["-gen-typedef-decls"],
+        "stablehlo/dialect/VhloTypeDefs.cpp.inc": ["-gen-typedef-defs"],
+    },
     tblgen = "@llvm-project//mlir:mlir-tblgen",
     td_file = "stablehlo/dialect/VhloOps.td",
     deps = [
diff --ruN a/stablehlo/stablehlo/conversions/tosa/tests/binary.mlir b/stablehlo/stablehlo/conversions/tosa/tests/binary.mlir
--- stablehlo/stablehlo/conversions/tosa/tests/binary.mlir
+++ stablehlo/stablehlo/conversions/tosa/tests/binary.mlir
@@ -45,7 +45,7 @@
 
 // CHECK-LABEL: @divide
 func.func @divide(%arg0 : tensor<10xi32>, %arg1 : tensor<10xi32>) -> tensor<10xi32> {
-  // CHECK: tosa.int_div
+  // CHECK: tosa.intdiv
   %0 = "stablehlo.divide"(%arg0, %arg1) : (tensor<10xi32>, tensor<10xi32>) -> tensor<10xi32>
   return %0 : tensor<10xi32>
 }
diff --ruN a/stablehlo/stablehlo/conversions/tosa/transforms/StablehloLegalizeToTosa.pdll b/stablehlo/stablehlo/conversions/tosa/transforms/StablehloLegalizeToTosa.pdll
--- stablehlo/stablehlo/conversions/tosa/transforms/StablehloLegalizeToTosa.pdll
+++ stablehlo/stablehlo/conversions/tosa/transforms/StablehloLegalizeToTosa.pdll
@@ -156,7 +156,7 @@
 Pattern =>
   replace op<stablehlo.divide>(input0 : Value<_: Tosa_Int32Tensor>,
                           input1 : Value<_: Tosa_Int32Tensor>)
-     with op<tosa.int_div>(input0, input1);
+     with op<tosa.intdiv>(input0, input1);
 Pattern =>
   replace op<stablehlo.maximum>(input0 : Value<_: Tosa_Tensor>,
                            input1 : Value<_: Tosa_Tensor>)
diff --ruN a/stablehlo/stablehlo/tests/BUILD.bazel b/stablehlo/stablehlo/tests/BUILD.bazel
--- stablehlo/stablehlo/tests/BUILD.bazel
+++ stablehlo/stablehlo/tests/BUILD.bazel
@@ -51,16 +51,10 @@
 gentbl_cc_library(
     name = "check_ops_inc_gen",
     strip_include_prefix = ".",
-    tbl_outs = [
-        (
-            ["-gen-op-decls"],
-            "CheckOps.h.inc",
-        ),
-        (
-            ["-gen-op-defs"],
-            "CheckOps.cpp.inc",
-        ),
-    ],
+    tbl_outs = {
+        "CheckOps.h.inc": ["-gen-op-decls"],
+        "CheckOps.cpp.inc": ["-gen-op-defs"],
+    },
     tblgen = "@llvm-project//mlir:mlir-tblgen",
     td_file = "CheckOps.td",
     deps = [
@@ -108,15 +102,10 @@
 gentbl_cc_library(
     name = "test_utils_inc_gen",
     strip_include_prefix = ".",
-    tbl_outs = [
-        (
-            [
-                "-gen-pass-decls",
-                "-name=HloTest",
-            ],
-            "TestUtils.h.inc",
-        ),
-    ],
+    tbl_outs = {"TestUtils.h.inc": [
+        "-gen-pass-decls",
+        "-name=HloTest",
+    ]},
     tblgen = "@llvm-project//mlir:mlir-tblgen",
     td_file = "TestUtils.td",
     deps = [
diff --ruN a/stablehlo/stablehlo/transforms/optimization/StablehloAggressiveSimplification.cpp b/stablehlo/stablehlo/transforms/optimization/StablehloAggressiveSimplification.cpp
--- stablehlo/stablehlo/transforms/optimization/StablehloAggressiveSimplification.cpp
+++ stablehlo/stablehlo/transforms/optimization/StablehloAggressiveSimplification.cpp
@@ -1539,8 +1539,8 @@
 
 void populateStablehloHloImportCanonicalizationPatterns(
     MLIRContext *context, RewritePatternSet *patterns) {
-  patterns->add<ReshapeIsNoop, TupleIsRepacking, TupleIsUnpacked,
-                WhileOpImplicitCapture>(context);
+  patterns->add<ReshapeOp_RemoveNoop, GetTupleElementOp_UnpackTuple,
+                TupleIsRepacking, WhileOpImplicitCapture>(context);
 }
 
 std::unique_ptr<Pass> createStablehloAggressiveSimplificationPass(
diff --ruN a/stablehlo/stablehlo/transforms/optimization/StablehloAggressiveSimplificationPatterns.td b/stablehlo/stablehlo/transforms/optimization/StablehloAggressiveSimplificationPatterns.td
--- stablehlo/stablehlo/transforms/optimization/StablehloAggressiveSimplificationPatterns.td
+++ stablehlo/stablehlo/transforms/optimization/StablehloAggressiveSimplificationPatterns.td
@@ -136,104 +136,163 @@
 // AddOp
 
 // Pattern: add(cst, X) -> add(X, cst)
-def : CanonicalizeConstantToRhs<StableHLO_AddOp>;
+def AddOp_CanonicalizeConstantToRhs
+  : CanonicalizeConstantToRhs<StableHLO_AddOp>;
 
 // Pattern: add(X, 0) -> X
-def : Pat<(StableHLO_AddOp $lhs, (ConstantLikeMatcher AnyZero:$value)),
-          (replaceWithValue $lhs)>;
+def AddOp_RemoveNoop
+  : Pat<(StableHLO_AddOp $lhs, (ConstantLikeMatcher AnyZero:$value)),
+        (replaceWithValue $lhs)>;
 
 ////////
 // AndOp
 
 // Pattern: and(cst, X) -> and(X, cst)
-def : CanonicalizeConstantToRhs<StableHLO_AndOp>;
+def AndOp_CanonicalizeConstantToRhs
+  : CanonicalizeConstantToRhs<StableHLO_AndOp>;
 
 // Pattern: and(X, 0) -> 0
-def : Pat<(StableHLO_AndOp $lhs, (StableHLO_ConstantOp:$zero IntZero:$value)),
-          (replaceWithValue $zero)>;
+def AndOp_FoldToZero
+  : Pat<(StableHLO_AndOp $lhs, (StableHLO_ConstantOp:$zero IntZero:$value)),
+        (replaceWithValue $zero)>;
 
 // Pattern: and(X, 1) -> X
-def : Pat<(StableHLO_AndOp $lhs, (StableHLO_ConstantOp:$one IntAllOnes:$value)),
-          (replaceWithValue $lhs)>;
+def AndOp_RemoveNoop
+  : Pat<(StableHLO_AndOp $lhs, (StableHLO_ConstantOp:$one IntAllOnes:$value)),
+        (replaceWithValue $lhs)>;
 
 ////////
 // BroadcastInDimOp
 
 // Pattern: broadcast_in_dim(X, [iota...]) -> X
-def : Pat<(StableHLO_BroadcastInDimOp:$op $operand, IotaDims:$dims),
-          (replaceWithValue $operand),
-          [(TypesEqual $op, $operand)]>;
-
-// Pattern: broadcast_in_dim(broadcast_in_dim(X, [dimsA...]), [dimsB...]) -> broadcast_in_dim(X, merge(dimsA, dimsB))
-def : Pat<(StableHLO_BroadcastInDimOp
+def BroadcastInDimOp_RemoveNoop
+  : Pat<(StableHLO_BroadcastInDimOp:$op $operand, IotaDims:$dims),
+        (replaceWithValue $operand),
+        [(TypesEqual $op, $operand)]>;
+
+// Pattern: broadcast_in_dim(broadcast_in_dim(X, [dimsA...]), [dimsB...])
+//       -> broadcast_in_dim(X, merge(dimsA, dimsB))
+def BroadcastInDimOp_MergeComposition
+  : Pat<(StableHLO_BroadcastInDimOp
             (StableHLO_BroadcastInDimOp $operand, $dims_parent), $dims),
-          (StableHLO_BroadcastInDimOp $operand, (MergeBroadcastDims $dims, $dims_parent))>;
-
-// Pattern: broadcast_in_dim(X, [sorted...]) -> reshape(X, [sorted...]) [if same numel]
-def : Pat<(StableHLO_BroadcastInDimOp:$op $operand, SortedDims:$dims),
-          (StableHLO_ReshapeOpWithShape $op, $operand),
-          [(NumberOfElementsEqual $op, $operand)]>;
-
-// Pattern: broadcast_in_dim(X, [dims...]) -> transpose(X, [dims...]) [if same numel & rank]
-def : Pat<(StableHLO_BroadcastInDimOp:$op $operand, $dims),
-          (StableHLO_TransposeOp $operand, $dims),
-          [(NumberOfElementsEqual $op, $operand), (RankEqual $op, $operand)]>;
+        (StableHLO_BroadcastInDimOp
+            $operand, (MergeBroadcastDims $dims, $dims_parent))>;
+
+// Pattern: broadcast_in_dim(X, [sorted...]) -> reshape(X, [sorted...])
+//          [if same numel]
+def BroadcastInDimOp_ReplaceWithReshape
+  : Pat<(StableHLO_BroadcastInDimOp:$op $operand, SortedDims:$dims),
+        (StableHLO_ReshapeOpWithShape $op, $operand),
+        [(NumberOfElementsEqual $op, $operand)]>;
+
+// Pattern: broadcast_in_dim(X, [dims...]) -> transpose(X, [dims...])
+//          [if same numel & rank]
+def BroadcastInDimOp_ReplaceWithTranspose
+  : Pat<(StableHLO_BroadcastInDimOp:$op $operand, $dims),
+        (StableHLO_TransposeOp $operand, $dims),
+        [(NumberOfElementsEqual $op, $operand), (RankEqual $op, $operand)]>;
 
 ////////
 // ConvertOp
 
 // Pattern: convert(X, [X.type]) -> X
-def : Pat<(StableHLO_ConvertOp:$convert $operand),
-          (replaceWithValue $operand),
-          [(TypesEqual $convert, $operand)]>;
+def ConvertOp_RemoveNoop
+  : Pat<(StableHLO_ConvertOp:$convert $operand),
+        (replaceWithValue $operand),
+        [(TypesEqual $convert, $operand)]>;
 
 ////////
 // DynamicBroadcastInDimOp
 
-// Pattern: dynamic_broadcast_in_dim(dynamic_broadcast_in_dim(X, _, [dimsA...]), shape, [dimsB...]) -> dynamic_broadcast_in_dim(X, shape, merge(dimsA, dimsB))
-// TODO: Think more if the values of known_expanding_dimensions and known_non_expanding_dimensions can be preserved.
-def : Pat<(StableHLO_DynamicBroadcastInDimOp
-            (StableHLO_DynamicBroadcastInDimOp $operand, $shape_p, $dims_p, $expanding_p, $nonexpanding_p),
-             $shape, $dims, $expanding, $nonexpanding),
-          (StableHLO_DynamicBroadcastInDimOp $operand, $shape, (MergeBroadcastDims $dims, $dims_p), (GetEmptyI64Array), (GetEmptyI64Array))>;
-
-// Pattern: dynamic_broadcast_in_dim(X, _, _, [all_nonexpanding...]) -> convert(X)
-// No-op, but wrap in ConvertOp to preserve dynamic output shape, can be
-// important if this result is returned, where refining type would require
-// also updating the funciton signature.
-def : Pat<(StableHLO_DynamicBroadcastInDimOp:$op $operand, $shape, IotaDims:$dims, $expanding, $nonexpanding),
-          (StableHLO_ConvertOpWithShape $op, $operand),
-          [(AllDimsNonExpanding $nonexpanding, $op)]>;
-
-// Pattern: dynamic_broadcast_in_dim(dynamic_reshape(X, shape), shape) -> dynamic_reshape(X, shape)
+// Pattern: dynamic_broadcast_in_dim(dynamic_broadcast_in_dim(X, _, [dimsA...]),
+//                                   shape, [dimsB...])
+//       -> dynamic_broadcast_in_dim(X, shape, merge(dimsA, dimsB))
+//
+// TODO: Think more about whether the values of known_expanding_dimensions and
+//       known_non_expanding_dimensions can be preserved.
+def DynamicBroadcastInDimOp_MergeComposition
+  : Pat<(StableHLO_DynamicBroadcastInDimOp
+            (StableHLO_DynamicBroadcastInDimOp
+                $operand, $shape_p, $dims_p, $expanding_p, $nonexpanding_p),
+            $shape,
+            $dims,
+            $expanding,
+            $nonexpanding),
+        (StableHLO_DynamicBroadcastInDimOp
+            $operand,
+            $shape,
+            (MergeBroadcastDims $dims, $dims_p),
+            (GetEmptyI64Array),
+            (GetEmptyI64Array))>;
+
+// Pattern: dynamic_broadcast_in_dim(X, _, _, [all_nonexpanding...])
+//       -> convert(X)
+//
+// No-op, but wrap in ConvertOp to preserve dynamic output shape. This can be
+// important if the result is returned, in which case refining the type would
+// require also updating the funciton signature.
+def DynamicBroadcastInDimOp_ReplaceNoopWithConvert
+  : Pat<(StableHLO_DynamicBroadcastInDimOp:$op
+            $operand, $shape, IotaDims:$dims, $expanding, $nonexpanding),
+        (StableHLO_ConvertOpWithShape $op, $operand),
+        [(AllDimsNonExpanding $nonexpanding, $op)]>;
+
+// Pattern: dynamic_broadcast_in_dim(dynamic_reshape(X, shape), shape)
+//       -> dynamic_reshape(X, shape)
+//
 // If sharing same shape operand, is dynamic reshape.
-def : Pat<(StableHLO_DynamicBroadcastInDimOp
-            (StableHLO_DynamicReshapeOp $operand, $shape), $shape, IotaDims:$dims, $expanding, $nonexpanding),
-          (StableHLO_DynamicReshapeOp $operand, $shape)>;
+def DynamicBroadcastInDimOp_FoldToDynamicReshape
+  : Pat<(StableHLO_DynamicBroadcastInDimOp
+            (StableHLO_DynamicReshapeOp $operand, $shape),
+            $shape,
+            IotaDims:$dims,
+            $expanding,
+            $nonexpanding),
+        (StableHLO_DynamicReshapeOp $operand, $shape)>;
 
 // Pattern: dynamic_broadcast_in_dim(X, shape_of(X)) -> X
-def : Pat<(StableHLO_DynamicBroadcastInDimOp
-            $operand, (Shape_ShapeOfOp $operand), IotaDims:$dims, $expanding, $nonexpanding),
-          (replaceWithValue $operand)>;
+def DynamicBroadcastInDimOp_RemoveNoop
+  : Pat<(StableHLO_DynamicBroadcastInDimOp
+            $operand,
+            (Shape_ShapeOfOp $operand),
+            IotaDims:$dims,
+            $expanding,
+            $nonexpanding),
+        (replaceWithValue $operand)>;
 
 ////////
 // DynamicGatherOp
 
 // Pattern: dynamic_gather(x, constant(slice_sizes)) -> gather(x, slice_sizes)
-def : Pat<(StableHLO_DynamicGatherOp $operand, $start_indices, (StableHLO_ConstantOp DenseIntElementsAttr:$slice_sizes), $dimension_numbers, $indices_are_sorted),
-          (StableHLO_GatherOp $operand, $start_indices, $dimension_numbers, (ConvertToI64Array $slice_sizes), $indices_are_sorted)>;
+def DynamicGatherOp_ReplaceWithGather
+  : Pat<(StableHLO_DynamicGatherOp
+            $operand,
+            $start_indices,
+            (StableHLO_ConstantOp DenseIntElementsAttr:$slice_sizes),
+            $dimension_numbers,
+            $indices_are_sorted),
+        (StableHLO_GatherOp
+            $operand,
+            $start_indices,
+            $dimension_numbers,
+            (ConvertToI64Array $slice_sizes),
+            $indices_are_sorted)>;
 
 ////////
 // DynamicPadOp
 
 // Pattern: dynamic_pad(X, low, high, interior) -> pad(X, low, high, interior)
-//            [if low, high, interior are all constants]
-def : Pat<(StableHLO_DynamicPadOp $input,
+//          [if low, high, interior are all constants]
+def DynamicPadOp_ReplaceWithPad
+  : Pat<(StableHLO_DynamicPadOp
+            $input,
             $padding_value,
             (ConstantLikeMatcher AnyIntElementsAttr:$edge_padding_low),
             (ConstantLikeMatcher AnyIntElementsAttr:$edge_padding_high),
             (ConstantLikeMatcher AnyIntElementsAttr:$interior_padding)),
-          (StableHLO_PadOp $input, $padding_value,
+        (StableHLO_PadOp
+            $input,
+            $padding_value,
             (ConvertToI64Array $edge_padding_low),
             (ConvertToI64Array $edge_padding_high),
             (ConvertToI64Array $interior_padding))>;
@@ -241,104 +300,127 @@
 ////////
 // DynamicReshapeOp
 
-// Pattern: dynamic_reshape(dynamic_reshape(X, _), shape)) -> dynamic_reshape(X, shape)
-def : Pat<(StableHLO_DynamicReshapeOp (StableHLO_DynamicReshapeOp $operand, $shape_p), $shape),
-           (StableHLO_DynamicReshapeOp $operand, $shape)>;
+// Pattern: dynamic_reshape(dynamic_reshape(X, _), shape))
+//       -> dynamic_reshape(X, shape)
+def DynamicReshapeOp_MergeComposition
+  : Pat<(StableHLO_DynamicReshapeOp
+            (StableHLO_DynamicReshapeOp $operand, $shape_p), $shape),
+        (StableHLO_DynamicReshapeOp $operand, $shape)>;
 
 // Pattern: shape_of(dynamic_reshape(X, shape)) -> shape
-def : Pat<(Shape_ShapeOfOp:$op (StableHLO_DynamicReshapeOp $x, $shape)),
-          (replaceWithValue $shape),
-          [(TypesEqual $shape, $op)]>;
+def DynamicReshapeOp_FoldComposedOpsToShapeOperand
+  : Pat<(Shape_ShapeOfOp:$op (StableHLO_DynamicReshapeOp $x, $shape)),
+        (replaceWithValue $shape),
+        [(TypesEqual $shape, $op)]>;
 
 ////////
 // DynamicUpdateSliceOp
 
 // Pattern: dynamic_update_slice(X, update : zero_extent)) -> X
-def : Pat<(StableHLO_DynamicUpdateSliceOp $operand, (ConstantLikeMatcher ZeroExtent:$update), $start_indices),
-           (replaceWithValue $operand)>;
+def DynamicUpdateSliceOp_RemoveNoop
+  : Pat<(StableHLO_DynamicUpdateSliceOp
+            $operand, (ConstantLikeMatcher ZeroExtent:$update), $start_indices),
+        (replaceWithValue $operand)>;
 
 // Pattern: dynamic_update_slice(X, update, start_indices : zero)) -> update
-def : Pat<(StableHLO_DynamicUpdateSliceOp AnyStaticShapeTensor:$operand, AnyStaticShapeTensor:$update, $start_indices),
-           (replaceWithValue $update),
-           [(TypesEqual $operand, $update), (AllZero $start_indices)]>;
+def DynamicUpdateSliceOp_FoldToUpdateOperand
+  : Pat<(StableHLO_DynamicUpdateSliceOp
+            AnyStaticShapeTensor:$operand,
+            AnyStaticShapeTensor:$update,
+            $start_indices),
+        (replaceWithValue $update),
+        [(TypesEqual $operand, $update), (AllZero $start_indices)]>;
 
 
 ////////
 // ComplexOp
 
 // Pattern: complex(real(X), imag(X))) -> X
-def : Pat<(StableHLO_ComplexOp (StableHLO_RealOp $operand), (StableHLO_ImagOp $operand)),
-          (replaceWithValue $operand)>;
+def ComplexOp_CancelOutComposedOps
+  : Pat<(StableHLO_ComplexOp
+            (StableHLO_RealOp $operand), (StableHLO_ImagOp $operand)),
+        (replaceWithValue $operand)>;
 
 
 ////////
 // ImagOp
 
 // Pattern: imag(complex(R,I)) -> I
-def : Pat<(StableHLO_ImagOp (StableHLO_ComplexOp $lhs, $rhs)),
-          (replaceWithValue $rhs)>;
+def ImagOp_CancelOutComposedOps
+  : Pat<(StableHLO_ImagOp (StableHLO_ComplexOp $lhs, $rhs)),
+        (replaceWithValue $rhs)>;
 
 ////////
 // IotaOp
 
 // Pattern: iota(dim) : type -> constant(0) : type [if type[dim] == 1]
-def : Pat<(StableHLO_IotaOp:$iota $dim),
-          (StableHLO_ConstantLike<"0"> $iota),
-          [(DimSizeEquals<1> $iota, $dim)]>;
+def IotaOp_FoldScalarToZero
+  : Pat<(StableHLO_IotaOp:$iota $dim),
+        (StableHLO_ConstantLike<"0"> $iota),
+        [(DimSizeEquals<1> $iota, $dim)]>;
 
 
 ////////
 // MaxOp
 
 // Pattern: max(cst, X) -> max(X, cst)
-def : CanonicalizeConstantToRhs<StableHLO_MaxOp>;
+def MaxOp_CanonicalizeConstantToRhs
+  : CanonicalizeConstantToRhs<StableHLO_MaxOp>;
 
 ////////
 // MinOp
 
 // Pattern: minimum(cst, X) -> minimum(X, cst)
-def : CanonicalizeConstantToRhs<StableHLO_MinOp>;
+def MinOp_CanonicalizeConstantToRhs
+  : CanonicalizeConstantToRhs<StableHLO_MinOp>;
 
 ////////
 // MulOp
 
 // Pattern: multiply(cst, X) -> multiply(X, cst)
-def : CanonicalizeConstantToRhs<StableHLO_MulOp>;
+def MulOp_CanonicalizeConstantToRhs
+  : CanonicalizeConstantToRhs<StableHLO_MulOp>;
 
 // Pattern: multiply(X, 0i) -> 0i
-// Multiplication by 0. This fold is not trivial for floats in presence of NaNs
-def : Pat<(StableHLO_MulOp $lhs, (StableHLO_ConstantOp:$zero AnyZero:$value)),
-          (replaceWithValue $zero)>;
+//
+// Multiplication by 0. This fold is not trivial for floats in presence of NaNs.
+def MulOp_FoldToZero
+  : Pat<(StableHLO_MulOp $lhs, (StableHLO_ConstantOp:$zero AnyZero:$value)),
+        (replaceWithValue $zero)>;
 
 // Pattern: multiply(X, 1i) -> X
-def : Pat<(StableHLO_MulOp $lhs, (StableHLO_ConstantOp AnyOne:$value)),
-          (replaceWithValue $lhs)>;
+def MulOp_RemoveNoop
+  : Pat<(StableHLO_MulOp $lhs, (StableHLO_ConstantOp AnyOne:$value)),
+        (replaceWithValue $lhs)>;
 
 ////////
 // OrOp
 
 // Pattern: or(cst, X) -> or(X, cst)
-def : CanonicalizeConstantToRhs<StableHLO_OrOp>;
+def OrOp_CanonicalizeConstantToRhs : CanonicalizeConstantToRhs<StableHLO_OrOp>;
 
 // Pattern: or(X, 1) -> 1
-def : Pat<(StableHLO_OrOp $lhs, (StableHLO_ConstantOp:$one IntAllOnes:$value)),
-          (replaceWithValue $one)>;
+def OrOp_FoldToOne
+  : Pat<(StableHLO_OrOp $lhs, (StableHLO_ConstantOp:$one IntAllOnes:$value)),
+        (replaceWithValue $one)>;
 
 // Pattern: or(X, 0) -> X
-def : Pat<(StableHLO_OrOp $lhs, (StableHLO_ConstantOp:$zero IntZero:$value)),
-          (replaceWithValue $lhs)>;
+def OrOp_RemoveNoop
+  : Pat<(StableHLO_OrOp $lhs, (StableHLO_ConstantOp:$zero IntZero:$value)),
+        (replaceWithValue $lhs)>;
 
 ////////
 // RealDynamicSliceOp
 
 // Pattern: real_dynamic_slice(X, start, limit, strides)
-//           -> slice(X, start, limit, strides)
+//       -> slice(X, start, limit, strides)
 //          [if start, limit, strides are all constants]
-def : Pat<(StableHLO_RealDynamicSliceOp $operand,
+def RealDynamicSliceOp_ReplaceWithSlice
+  : Pat<(StableHLO_RealDynamicSliceOp $operand,
             (ConstantLikeMatcher DenseIntElementsAttr:$start_indices),
             (ConstantLikeMatcher DenseIntElementsAttr:$limit_indices),
             (ConstantLikeMatcher DenseIntElementsAttr:$strides)),
-          (StableHLO_SliceOp $operand,
+        (StableHLO_SliceOp $operand,
             (ConvertToI64Array $start_indices),
             (ConvertToI64Array $limit_indices),
             (ConvertToI64Array $strides))>;
@@ -347,86 +429,114 @@
 // RealOp
 
 // Pattern: real(complex(R,I)) -> X
-def : Pat<(StableHLO_RealOp (StableHLO_ComplexOp $lhs, $rhs)),
-          (replaceWithValue $lhs)>;
+def RealOp_CancelOutComposedOps
+  : Pat<(StableHLO_RealOp (StableHLO_ComplexOp $lhs, $rhs)),
+        (replaceWithValue $lhs)>;
 
 ////////
 // ReduceOp
 // Note: If modifying region is required, must write pattern in C++
 
 // Pattern: reduce(X..., dims=[], add) -> X...
-def : Pat<(StableHLO_ReduceOp $operands, $init, EmptyI64Array:$dims),
-          (replaceWithValue $operands)>;
+def ReduceOp_RemoveNoop
+  : Pat<(StableHLO_ReduceOp $operands, $init, EmptyI64Array:$dims),
+        (replaceWithValue $operands)>;
 
 ////////
 // ReshapeOp
 
 // Pattern: reshape(reshape(X, _), [shape]) -> reshape(X, [shape])
-def : Pat<(StableHLO_ReshapeOp:$reshape (StableHLO_ReshapeOp $operand)),
-          (StableHLO_ReshapeOpWithShape $reshape, $operand)>;
+def ReshapeOp_MergeComposition
+  : Pat<(StableHLO_ReshapeOp:$reshape (StableHLO_ReshapeOp $operand)),
+        (StableHLO_ReshapeOpWithShape $reshape, $operand)>;
 
 // Pattern: reshape(X, [X.shape]) -> X
-def ReshapeIsNoop
-    : Pat<(StableHLO_ReshapeOp:$reshape $operand),
-          (replaceWithValue $operand),
-          [(TypesEqual $reshape, $operand)]>;
+def ReshapeOp_RemoveNoop
+  : Pat<(StableHLO_ReshapeOp:$reshape $operand),
+        (replaceWithValue $operand),
+        [(TypesEqual $reshape, $operand)]>;
 
 
 ////////
 // SelectOp
 
-// Pattern: select(not(p), t, f) => select(p, f, t)
-def : Pat<
-  (StableHLO_SelectOp (StableHLO_NotOp $pred), $on_true, $on_false),
-  (StableHLO_SelectOp $pred, $on_false, $on_true)>;
-
-// Pattern: select(broadcast(not(p)), t, f) => select(broadcast(p), f, t)
-def : Pat<(StableHLO_SelectOp (StableHLO_BroadcastInDimOp:$b (StableHLO_NotOp $pred), $broadcast_dimensions), $on_true, $on_false),
-          (StableHLO_SelectOp (StableHLO_BroadcastInDimOp $pred, $broadcast_dimensions, (returnType $b)), $on_false, $on_true),
-          [(HasOneUse $b)]>;
+// Pattern: select(not(p), t, f) -> select(p, f, t)
+def SelectOp_InvertPredicateAndSwap
+  : Pat<(StableHLO_SelectOp (StableHLO_NotOp $pred), $on_true, $on_false),
+        (StableHLO_SelectOp $pred, $on_false, $on_true)>;
+
+// Pattern: select(broadcast(not(p)), t, f) -> select(broadcast(p), f, t)
+def SelectOp_InvertBroadcastPredicateAndSwap
+  : Pat<(StableHLO_SelectOp
+            (StableHLO_BroadcastInDimOp:$b
+                (StableHLO_NotOp $pred), $broadcast_dimensions),
+            $on_true,
+            $on_false),
+        (StableHLO_SelectOp
+            (StableHLO_BroadcastInDimOp
+                $pred, $broadcast_dimensions, (returnType $b)),
+            $on_false,
+            $on_true),
+        [(HasOneUse $b)]>;
 
 ////////
 // SubtractOp
 
 // Pattern: subtract(X, X) -> 0
-// Must be static shape, otherwise would require broadcasting via CHLO_ConstantLike
-def : Pat<(StableHLO_SubtractOp AnyStaticShapeTensor:$operand, $operand),
-          (StableHLO_ConstantLike<"0"> $operand)>;
+//
+// Must be static shape, otherwise would require broadcasting via
+// CHLO_ConstantLike.
+def SubtractOp_FoldToZero
+  : Pat<(StableHLO_SubtractOp AnyStaticShapeTensor:$operand, $operand),
+        (StableHLO_ConstantLike<"0"> $operand)>;
 
 // Pattern: subtract(X, 0) -> X
-def : Pat<(StableHLO_SubtractOp $lhs, (StableHLO_ConstantOp AnyZero:$value)),
-          (replaceWithValue $lhs)>;
+def SubtractOp_RemoveNoop
+  : Pat<(StableHLO_SubtractOp $lhs, (StableHLO_ConstantOp AnyZero:$value)),
+        (replaceWithValue $lhs)>;
 
 ////////
 // SliceOp
 
-// Pattern: slice(X, [A:A], [B:B], ...) -> X
-def : Pat<(StableHLO_SliceOp:$op AnyStaticShapeTensor:$operand, $start_indices, $limit_indices, $strides),
-          (replaceWithValue $operand),
-          [(TypesEqual $operand, $op)]>;
+// Pattern: slice(X, :, :, ...) -> X
+def SliceOp_RemoveNoop
+  : Pat<(StableHLO_SliceOp:$op
+            AnyStaticShapeTensor:$operand,
+            $start_indices,
+            $limit_indices,
+            $strides),
+        (replaceWithValue $operand),
+        [(TypesEqual $operand, $op)]>;
 
 ////////
 // TransposeOp
 
 // Pattern: transpose(X, [iota...]) -> X
-def : Pat<(StableHLO_TransposeOp $lhs, IotaDims:$dims),
-          (replaceWithValue $lhs)>;
+def TransposeOp_RemoveNoop
+  : Pat<(StableHLO_TransposeOp $lhs, IotaDims:$dims),
+        (replaceWithValue $lhs)>;
 
 ////////
 // GetTupleElementOp
 
 // Pattern: get_tuple_element(tuple(X_0, X_1, ...), i) -> X_i
-def TupleIsUnpacked : Pat<(StableHLO_GetTupleElementOp (StableHLO_TupleOp:$tuple $operands), $idx),
-          (GetOperandN $tuple, $idx)>;
+def GetTupleElementOp_UnpackTuple
+  : Pat<(StableHLO_GetTupleElementOp
+            (StableHLO_TupleOp:$tuple $operands),
+            $idx),
+        (GetOperandN $tuple, $idx)>;
 
 ////////
 // XorOp
 
 // Pattern: xor(cst, X) -> xor(X, cst)
-def : CanonicalizeConstantToRhs<StableHLO_XorOp>;
+def XorOp_CanonicalizeConstantToRhs
+  : CanonicalizeConstantToRhs<StableHLO_XorOp>;
 
 // To consider: xor(X, X) -> 0
-// Unclear if this is beneficial on hardware vs adding another constant
-//
-// def : Pat<(StableHLO_XorOp AnyStaticShapeTensor:$operand, $operand),
-//           (StableHLO_ConstantLike<"0"> $operand)>;
+//
+// It's unclear if this is beneficial on hardware vs. adding another constant.
+//
+// def XorOp_FoldToZero
+//   : Pat<(StableHLO_XorOp AnyStaticShapeTensor:$operand, $operand),
+//         (StableHLO_ConstantLike<"0"> $operand)>;

